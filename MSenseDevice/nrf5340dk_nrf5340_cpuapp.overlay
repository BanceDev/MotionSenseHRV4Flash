// press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html


/* Begin dk trim section, that removes all dev kit specific nodes. */


&spi1 {
    status = "disabled";
};

&spi4 {
	status = "disabled";
};

&qspi {
	status = "disabled";
};


&uart0 {
	status = "okay";
};

&i2c1 {
	status = "disabled";
};

&pwm0 {
	status = "disabled";
};


&led0 {
    status = "okay";
	gpios = <&gpio0 30 GPIO_ACTIVE_LOW>;
};


&led1 {
    status = "okay";
    gpios = <&gpio0 31 GPIO_ACTIVE_LOW>;
};

&led2 {
    status = "okay";
	gpios = <&gpio1 15 GPIO_ACTIVE_HIGH>;
};



&led3 {
    status = "disabled";
};



&button0 {
    status = "disabled";
};

&button1 {
    status = "disabled";
};

&button2 {
    status = "disabled";
};

&button3 {
    status = "disabled";
};

&gpio_fwd {
	status = "okay";
};

/* End dev kit trim section */


&timer0 {
    status = "okay";
};

&timer1 {
    status = "okay";
};



&arduino_adc {
    io-channel-map = <0 &adc 0>, <1 &adc 1>, <2 &adc 2>, <3 &adc 3>, <4 &adc 4>, <5 &adc 5>;
};


/ {
    aliases {
        customspi = &spi1;
		spi-flash0 = &mx66u;
    };
};


/ {
	chosen {
	
		nordic,pm-ext-flash = &mx66u;
	
		};
	};
	

/delete-node/ &storage_partition;


//uart cannot also be in operation with spi0, however, this means we have to use segger RTT, because uart is used for console output
&uart0 {
	status = "okay";
};

&spi2 {
compatible = "nordic,nrf-spim";
	status = "okay";
	cs-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
	pinctrl-0 = <&spi1_default>;
	pinctrl-1 = <&spi1_sleep>;
	pinctrl-names = "default", "sleep";

};

// We need to disable i2c1, since we are already using spi1 and it is no longer needed (can't have 2 devices on the same unit).
&i2c1 {
	status = "okay";
	compatible = "nordic,nrf-twim";
	clock-frequency = <I2C_BITRATE_FAST>;
	pinctrl-0 = <&battery_default>;
	pinctrl-1 = <&battery_sleep>;
	pinctrl-names = "default", "sleep";
	bq27441@55 {
		compatible = "ti,bq274xx";
		reg = <0x55>;
		design-voltage = <3700>;
		design-capacity = <1800>;
		taper-current = <45>;
		terminate-voltage = <3000>;
	};
};



/* 
&i2c0 {
	status = "okay";
	compatible = "nordic,nrf-twim";
	pinctrl-0 = < &i2c1_default>;
	pinctrl-1 = <&i2c1_sleep>;
	pinctrl-names = "default", "sleep";
};
*/


&spi3{
	compatible = "nordic,nrf-spim";
	status = "okay";
	cs-gpios = <&gpio1 9 GPIO_ACTIVE_LOW>;
	pinctrl-0 = <&ppg_default>;
	pinctrl-1 = <&ppg_sleep>;
	pinctrl-names = "default", "sleep";
};

/* 
&spi4 {
	status = "okay";
	pinctrl-0 = < &spi_flash_default>;
	pinctrl-1 = <&spi_flash_sleep>;
	pinctrl-names = "default", "sleep";
	cs-gpios = <&gpio0 18 GPIO_ACTIVE_LOW>, <&gpio0 4 GPIO_ACTIVE_LOW>;
	mt29: mt29f8g01ad@0 {
		compatible = "senselab,nanddisk";
		//size = <4194304000>;
		// size needs to be in bytes
		//size = <1073725440>;
		size = <2147450880>;
		reg = <0>;
		spi-max-frequency = <8000000>;
		jedec-id = [00 2c 47];
		status = "okay";
	};

};
*/

/* */
&spi4 {
	status = "okay";
	pinctrl-0 = < &spi_flash_default>;
	pinctrl-1 = <&spi_flash_sleep>;
	pinctrl-names = "default", "sleep";
	cs-gpios = <&gpio0 18 GPIO_ACTIVE_LOW>, <&gpio0 4 GPIO_ACTIVE_LOW>;
	mx66u: mx66u2g45g@0 {
		compatible = "jedec,spi-nor";
		//size = <4194304000>;
		// size needs to be in bytes
		//size = <1073725440>;
		size = <2147450880>;
		reg = <0>;
		spi-max-frequency = <8000000>;
		jedec-id = [c2 25 3c];
		status = "okay";
	};

};


//External Flash
/* 
&mx66u: mx66u2g45g@0{
	compatible = "nordic,qspi-nor";
	reg = <0>;
	
	writeoc = "pp4io";
	readoc = "read4io";
	sck-frequency = <8000000>;
	jedec-id = [c2 25 3c];
	sfdp-bfp = [
		e5 20 f1 ff  ff ff ff 03  44 eb 08 6b  08 3b 04 bb
		ee ff ff ff  ff ff 00 ff  ff ff 00 ff  0c 20 0f 52
		10 d8 00 ff  23 72 f5 00  82 ed 04 cc  44 83 68 44
		30 b0 30 b0  f7 c4 d5 5c  00 be 29 ff  f0 d0 ff ff
	];
	size = <67108864>;
	has-dpd;
	t-enter-dpd = <10000>;
	t-exit-dpd = <35000>;
	
}; 



  

*/

/* 
&qspi {
	status = "okay";
	pinctrl-0 = <&qspi_default>;
	pinctrl-1 = <&qspi_sleep>;
	pinctrl-names = "default", "sleep";
	mx66u: mx66u2g45g@0 {
		compatible = "nordic,qspi-nor";
		//compatible = "vnd,customflash";
		//compatible = "senselab,qspinor";
	reg = <0>;
	//MX25R64 supports only pp and pp4io
	writeoc = "pp4io";
	//MX25R64 supports all readoc options
	readoc = "read4io";
	sck-frequency = <8000000>;
	jedec-id = [c2 25 3c];
	sfdp-bfp = [
		e5 20 f1 ff  ff ff ff 03  44 eb 08 6b  08 3b 04 bb
		ee ff ff ff  ff ff 00 ff  ff ff 00 ff  0c 20 0f 52
		10 d8 00 ff  23 72 f5 00  82 ed 04 cc  44 83 68 44
		30 b0 30 b0  f7 c4 d5 5c  00 be 29 ff  f0 d0 ff ff
	];
	size = <67108864>;
	has-dpd;
	t-enter-dpd = <10000>;
	t-exit-dpd = <35000>;
	};
};
*/

&pinctrl {
	//spi 1, imu sensor
    spi1_default: spi1_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 1, 5)>,
				<NRF_PSEL(SPIM_MISO, 0, 25)>,
				<NRF_PSEL(SPIM_MOSI, 0, 24)>;
		};
	};

	spi1_sleep: spi1_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 1, 5)>,
				<NRF_PSEL(SPIM_MISO, 0, 25)>,
				<NRF_PSEL(SPIM_MOSI, 0, 24)>;
			low-power-enable;
		};
	};

	
	//spi 4, ppg sensor
	ppg_default: ppg_default {
		group1 {
			psels = <NRF_PSEL(SPIM_MOSI, 1, 6)>, <NRF_PSEL(SPIM_MISO, 1, 7)>, <NRF_PSEL(SPIM_SCK, 1, 8)>;
		};
	};

	ppg_sleep: ppg_sleep {
		group1{
			psels = <NRF_PSEL(SPIM_MOSI, 1, 6)>, <NRF_PSEL(SPIM_MISO, 1, 7)>, <NRF_PSEL(SPIM_SCK, 1, 8)>;
			low-power-enable;
		};
	};
	
	 
	//battery, on i2c0
	battery_default: battery_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 1, 3)>,
				<NRF_PSEL(TWIM_SCL, 1, 2)>;
		};
	};

	battery_sleep: battery_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 1, 3)>,
				<NRF_PSEL(TWIM_SCL, 1, 2)>;
			low-power-enable;
		};
	};

	
	spi_flash_default: spi_flash_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
				<NRF_PSEL(SPIM_MOSI, 0, 13)>,
				<NRF_PSEL(SPIM_MISO, 0, 14)>;
				
		};
	};
	
	spi_flash_sleep: spi_flash_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 0, 17)>,
			<NRF_PSEL(SPIM_MOSI, 0, 13)>,
			<NRF_PSEL(SPIM_MISO, 0, 14)>;
			low-power-enable;
		};
	};

};




