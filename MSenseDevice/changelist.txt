

This file contains a summary list of all the changes that were made when updating this project
from MotionSense3 to MotionSense4. It should be used as a reference guide for other devlopers who may want to 
back port additional features from 3 to 4, or vice versa; go back from 4 to 3, but keep some other code from 4. 


NrfConnect SDK 1.4 -> NrfConnect SDK 2.5


Simplified Cmake to use GLOB_RECURSE,
deleted out all find cxx directories, and compiler options, since those were only necessary for tensorflow lite micro,
which we aren't using anymore

KConfigs
Commented out all SPI1=y, SPI2=y, since these are now specified in the app/device tree overlays instead.

Changed all references to <zephyr.h> to <zephyr/kernel.h>
https://github.com/zephyrproject-rtos/zephyr/issues/49578
as per this commit, they are equivalent, and zephyr.h was deprecated.

The include directory for zephyr has now moved to be outside the folder "zephyr".
As such, all zephyr includes have to include the zephyr folder path
This means pretyy much everything has been renamed: bluetooth/xx.h is now
zephyr/bluetooth/xx.h, driver/spi.h is now zephyr/driver/spi.h... etc for every
single include file.

spi_cs_control struct changed the fields. the GPIO information is now inside a seperate struct called gpio_dt_spec.
and it is defined as:

struct gpio_dt_spec {
	/** GPIO device controlling the pin */
	const struct device *port;
	/** The pin's number on the device */
	gpio_pin_t pin;
	/** The pin's configuration flags as specified in devicetree */
	gpio_dt_flags_t dt_flags;
};


the fields for both imu_cs and ppg_cs were changed to match this.
the field for gpio_dev has changed name to 



bq274xx_command_reg_read: in .h file function declaration features int16_t, however in the 
implementation it is uint16_t. corrected to uint because that seemed to be the type it was actually called with.




changed all device object checking calls (gpioHandle_CS_ppg == NULL) to the better specified check: !device_is_ready(gpioHandle_CS_ppg)
this was done for most device objects, ppg gpio was just used for demonstration purposes.


Timers apparently don't work very well (crash?) when setting frequency with enums, altered code to just manually enter the 1Mhz frequency



The following KConfigs were added to provide USB and Filesystem Support:


Device Tree:

pins are now specified with the pin cntrl api

entered in config settings for ppg through spi3 and imu through spi4

changed qspi device to new flash specs


to veiw the partitions on windows, use the below command. If the watch/lfs partition is recognized, the partition number will list as one not zero.
wmic diskdrive list brief

The littlefs partition is configured as the following:
--read_size=16
       --prog_size=16 
       --block_size=4096 (I think this is one page on the hardware level of NOR) - gives 1000 hex addresses 
       --block_count=variable depends on the size flash we are using. block_count*block_size = total storage 
       --cache_size=64 
       --lookahead_size=32
	   sector size of 512
block size is the total size of a block, read and program size are usually the same


Fatfs has been configured as such:

CONFIG_PM_OVERRIDE_EXTERNAL_DRIVER_CHECK=y
CONFIG_MASS_STORAGE_DISK_NAME="SD"
#CONFIG_FILE_SYSTEM_LITTLEFS=y
CONFIG_FAT_FILESYSTEM_ELM=y

CONFIG_FS_FATFS_READ_ONLY=n
# below config is necessary because this determines the buffer fatfs internally uses to store reads which we do at a size of 4096
CONFIG_FS_FATFS_MAX_SS=4096
CONFIG_FS_FATFS_EXFAT=n
CONFIG_FS_FATFS_MAX_ROOT_ENTRIES=4096
CONFIG_FS_FATFS_LFN=y

I'll describe some of the most important ones breifly:

I configured the driver to write a sector size as determined by the disk size. Our 
nand flash is 4096, hence the value.
FAT fs typically only allows a certain amount of files in the root directory, so we have to
bump it up to fix this.




https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/config_and_build/config_and_build_system.html